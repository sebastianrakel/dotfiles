#!/bin/bash

#
# Define Variables
#

localprofile=$HOME/.profile.local
uname_string=`uname`
#
# Terminal Settings
#

if [ -z "$TMUX" ]; then
    export TERM=xterm-256color
fi

#
# Ruby Settings
#

if hash ruby 2>/dev/null; then
    PATH="`ruby -e 'print Gem.user_dir'`/bin:$PATH"
fi

#
# Nodejs Settings
#

PATH="$HOME/.node_modules/bin:$PATH"
export npm_config_prefix=~/.node_modules

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

#
# Go Lang Settings
#
export GOPATH="$HOME/.go"
PATH="$PATH:$GOPATH/bin"
export GOBIN=$GOPATH/bin

#
# Rust Lang Settings
#
PATH="$PATH:$HOME/.cargo/bin"

#
# Extend Path Variable
#

PATH="$HOME/.bin:$PATH"
PATH="$HOME/.bin/local:$PATH"
PATH="$HOME/.local/bin:$PATH"

#
# Base 16 - Color Switching
#

BASE16_SHELL="$HOME/.bin/base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        eval "$("$BASE16_SHELL/profile_helper.sh")"

#vim() {
#	if [[ "${BASE16_SHELL}" == *".light.sh" ]]; then
#		scheme=$(basename "$(echo "${BASE16_SHELL}")" | sed 's/.light.sh*//g')
#		/usr/bin/vim "+set background=light" "+colorscheme ${scheme}" "$@"
#	elif [[ "${BASE16_SHELL}" == *".dark.sh" ]]; then
#		scheme=$(basename "$(echo "${BASE16_SHELL}")" | sed 's/.dark.sh*//g')
#		/usr/bin/vim "+colorscheme ${scheme}" "$@"
#	fi
#}

#
# Environment
#

# export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=lcd'
# export _JAVA_AWT_WM_NONREPARENTING=1

#export VAGRANT_DEFAULT_PROVIDER=libvirt


ANDROID_SDK_HOME="$HOME/Android/Sdk"
if [ -d "$ANDROID_SDK_HOME/platform-tools" ]; then
    PATH="$ANDROID_SDK_HOME/platform-tools:$PATH"
fi

# Editor

export ALTERNATE_EDITOR=emacs
export EDITOR=emacsclient
export VISUAL=emacsclient

if [ "${uname_string}" = "Archlinux" ]; then
    # Archlinux Kernel check
    PRINT="0" archlinux_check_kernel.sh

fi

# GPG
if [ -e "${HOME}/.bin/gpg-agent.sh" ] ; then
    . "${HOME}/.bin/gpg-agent.sh"
fi

# Music

export MPD_HOST="$HOME/.mpd/socket"


pass() {
  gopass $@
}


# Little Helpers
goto_golang_project() {
    golang_chosen_dir=$(tree -L 3 -d -f -i "${GOPATH}/src/" | fzf)
    cd "${golang_chosen_dir}" || return
}

load_venv() {
    current_dir=$(pwd)
    if [ -d "${current_dir}/venv" ]; then
        source "${current_dir}/venv/bin/activate"
    else
        venv=$(find "${HOME}/.venvs" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | fzf)
        source "${HOME}/.venvs/${venv}/bin/activate"
    fi
}

take_this_project() {
    current_project_dir=$(pwd)
    if [ ! -d "${current_project_dir}/.git" ]; then
        echo "This is not a git project"
        return
    fi

    if [ ! -e "${current_project_dir}/.git/hooks/post-commit" ]; then
        ln -s "${HOME}/.git-templates/hooks/post-commit" "${current_project_dir}/.git/hooks/post-commit"
        echo "Installed Post Commit Hook"
    fi

    if [ -e "${current_project_dir}/.giterize.sh" ]; then
        echo "Run giterize"
        sh "${current_project_dir}/.giterize.sh"
    fi
}

#if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then
#    cd ${HOME}/Projects/Linux/tablecloth/
#  XKB_DEFAULT_LAYOUT=us exec build/tablecloth/tablecloth
#fi

#if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]] && [[ -z $XDG_SESSION_TYPE ]]; then
#  XDG_SESSION_TYPE=wayland exec dbus-run-session gnome-session
#fi

#if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then 
#  XKB_DEFAULT_LAYOUT=us exec sway -d 2 > /home/sebastian/sway.log
#fi

if type startx &>/dev/null && ! pgrep X >/dev/null; then
    if [[ ! $DISPLAY && $XDG_VTNR -eq 1 ]]; then
        startx
	exit
    fi
fi

if [ "$TERM" = "dump" ]; then
    PS1="> "
fi

#
# Load local settings
#

if [ -e "$localprofile" ] ; then
    . "$localprofile"
fi

