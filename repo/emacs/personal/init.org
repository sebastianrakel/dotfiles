#+STARTUP: content
#+TITLE: Sebastians emacs configuration - in org
#+BEGIN_CENTER
This is my emacs config, it's written in org-mode
#+END_CENTER
* StartUp
** Basic Package Setup
   #+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives
		 '("org" . "http://orgmode.org/elpa/") t)
    (add-to-list 'package-archives
		 '("melpa" . "http://melpa.org/packages/") t)
    (add-to-list 'package-archives
		 '("melpa-stable" . "http://stable.melpa.org/packages/") t)

    (package-initialize)

    ;; use-package to simplify the config file
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure 't)
  #+END_SRC  

** Look and Feel
*** Bars and Menus
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (toggle-scroll-bar -1)
    (set-fringe-mode 10)
    (global-display-line-numbers-mode)
    (set-default 'truncate-lines t)
    (defalias 'yes-or-no-p 'y-or-n-p)
    (column-number-mode 1)
  #+END_SRC
*** Font
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist '(font . "Iosevka SS08-14"))
  #+END_SRC
*** Theme
  #+BEGIN_SRC emacs-lisp
    (use-package dracula-theme
      :config
      (load-theme 'dracula t))
  #+END_SRC
** Backup
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+END_SRC
* Keybindings
  Use meta key for move between windows
  #+begin_src emacs-lisp
    (windmove-default-keybindings 'meta)
  #+end_src
  The long list of my keybindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-s") 'swiper)
    (global-set-key (kbd "C-c b") 'ivy-switch-buffer)
    (global-set-key (kbd "C-c r") 'reload-dotemacs)
    (global-set-key (kbd "C-c g") 'magit)
    (global-set-key (kbd "C-c p") 'projectile-command-map)
    (global-set-key (kbd "C-c q s") 'open-emacs-config)

    (global-set-key (kbd "C-c c r") 'lsp-find-references)
    (global-set-key (kbd "C-c c d") 'lsp-find-definition)
    (global-set-key (kbd "C-c c D") 'lsp-find-declaration)
    (global-set-key (kbd "C-c c R") 'lsp-rename)

    (global-set-key (kbd "C-c s i") 'yas-insert-snippet)
    (global-set-key (kbd "C-c s n") 'yas-new-snippet)

    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  #+END_SRC
** elisp mode
   #+begin_src emacs-lisp
     (add-hook 'emacs-lisp-mode
	       (lambda () (local-set-key (kbd "C-c m e") #'eval-buffer)))
   #+end_src
* Functions
** Reload Emacs
  #+BEGIN_SRC emacs-lisp
    (defun reload-dotemacs ()
      (interactive)
      (load-file "~/.emacs.d/init.el"))
  #+END_SRC
** Open Emacs Config
      #+begin_src emacs-lisp
	(defun open-emacs-config ()
	  (interactive)
	  (switch-to-buffer (find-file-noselect "~/.emacs.d/personal/init.org")))
      #+end_src
* Addons
** UI
*** Ivy,Counsel,Swiper
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t))

     (use-package counsel
       :after ivy
       :config
       (counsel-mode))

     (use-package swiper
       :after ivy)
   #+END_SRC
*** Powerline
    #+BEGIN_SRC emacs-lisp
      (use-package powerline
	:config
	(powerline-default-theme)
	(setq powerline-default-separator 'wave))
    #+END_SRC
*** Completion
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:config
	(add-hook 'after-init-hook 'global-company-mode)
	(setq company-minimum-prefix-length 2)
	(setq company-idle-delay 0))
    #+END_SRC
*** Which Key
    #+begin_src emacs-lisp
      (use-package which-key
	:config
	(setq which-key-idle-delay 0.3)
	(which-key-mode))
    #+end_src
*** Projectile
    #+begin_src emacs-lisp
      (use-package projectile
	:config
	(projectile-mode 1))
    #+end_src
*** Dashboard
    #+begin_src emacs-lisp
      (use-package all-the-icons)

      (use-package dashboard
	:config
	(dashboard-setup-startup-hook)
	(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
	(setq dashboard-startup-banner "~/.emacs.d/personal/images/avatar.png")
	(setq dashboard-center-content t)
	(setq dashboard-show-shortcuts t)
	(setq dashboard-set-heading-icons t)
	(setq dashboard-set-file-icons t)
	(setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
	(setq dashboard-items '((recents  . 5)
				(bookmarks . 5)
				(projects . 5)
				(registers . 5))))
    #+end_src
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit)
   #+END_SRC
** Coding
*** Common
**** Yasnippet
    #+begin_src emacs-lisp
      (use-package yasnippet
	:config
	(yas-global-mode 1))
    #+end_src
**** Parens, Delimiters
    #+begin_src emacs-lisp
      (use-package smartparens
	:config
	(add-hook 'prog-mode-hook #'smartparens-mode))
    #+end_src
    #+begin_src emacs-lisp
      (use-package rainbow-delimiters
	:config
	(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+end_src
**** LSP
    #+begin_src emacs-lisp
      (use-package lsp-mode
	:after lsp-ui
	:config
	(setq lsp-keymap-prefix "C-c l"))
      (use-package lsp-ui)
    #+end_src
**** Data Formats
     #+begin_src emacs-lisp
       (use-package yaml-mode)
     #+end_src
*** Org-Mode
    Some common org-mode settings
    #+begin_src emacs-lisp
      (setq org-hide-emphasis-markers t)
    #+end_src
    
    Give org mode beautiful bubbles instead of asteriks
    #+begin_src emacs-lisp
      (use-package org-bullets
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+end_src

    Add org-tempo for some basic snippets like <s<TAB> for code section
    #+begin_src emacs-lisp
      (require 'org-tempo)
    #+end_src    
*** HTML, Vue, TypeScript
    #+begin_src emacs-lisp
      (use-package web-mode)
    #+end_src
*** Golang
    #+begin_src emacs-lisp
      (defun lsp-go-install-save-hooks ()
	(add-hook 'before-save-hook #'lsp-format-buffer t t)
	(add-hook 'before-save-hook #'lsp-organize-imports t t))

      (use-package go-mode
	:config
	(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
	(add-hook 'go-mode-hook #'lsp-deferred)
	(add-hook 'go-mode-hook #'yas-minor-mode))
    #+end_src
*** Puppet
    #+begin_src emacs-lisp
      (use-package puppet-mode)
    #+end_src
*** Rust
    #+begin_src emacs-lisp
      (use-package cargo)

      (use-package rustic
	:config
	(setq rustic-format-on-save t))
    #+end_src
*** Docker, Nomad, Container, Stuff, Magic
    #+begin_src emacs-lisp
      (use-package hcl-mode)
    #+end_src

