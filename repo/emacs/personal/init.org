#+STARTUP: overview

* Package Manager
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

  (use-package use-package-ensure-system-package)
#+end_src

* Backup and Autosave Files
I don't want to have backup/autosave files in my project dirs
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+END_SRC

* Really Basic Stuff
Performance
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))

#+END_SRC

No warnings, most of them are warnings from plugins and i can't do anything
#+BEGIN_SRC emacs-lisp
  (setq native-comp-async-report-warnings-errors nil)
#+END_SRC

Movement with meta key
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings 'meta)
#+END_SRC

Disable lock files, because some lsp servers have problems with them
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
#+END_SRC

** My little Helper
*** Open Terminal in Project Dir or current Dir
#+BEGIN_SRC emacs-lisp
  (defun own/open-real-terminal--path (path)
    (let ((command (concat "herbstclient spawn alacritty --working-directory " path)))
      (message (concat "Open Terminal with command: " command))
      (shell-command command)))

  (defun own/open-real-terminal--with-current-directory()
    (message "Open Terminal with current directory path")
    (own/open-real-terminal--path(file-name-directory (buffer-file-name))))

  (defun own/open-real-terminal--with-projectile()
    (message "Open Terminal with projectile path")
    (own/open-real-terminal--path(projectile-project-root)))

  (defun own/open-real-terminal()
    (interactive)
    (if (projectile-project-root)
	(own/open-real-terminal--with-projectile)
      (own/open-real-terminal--with-current-directory)))
#+END_SRC
*** Reload Emacs Config
#+BEGIN_SRC emacs-lisp
  (defun own/emacs-reload-config()
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC
*** Open Emacs Config
#+BEGIN_SRC emacs-lisp
  (defun own/emacs-open-config()
    (interactive)
    (switch-to-buffer (find-file-noselect "~/.emacs.d/personal/init.org")))
#+END_SRC
*** Open Project Directory 
I have some directories which i want to open directly via shortcut, this function helps me
#+BEGIN_SRC emacs-lisp
  (defun own/open-project-directory(directory)
    (interactive)
    (projectile-find-file-in-directory directory))
#+END_SRC

** Shortcuts without Plugins
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c r") 'own/emacs-reload-config)
  (global-set-key (kbd "C-c x") 'own/open-real-terminal)
  (global-set-key (kbd "C-c j b") 'beginning-of-buffer)
  (global-set-key (kbd "C-c j e") 'end-of-buffer)
  (global-set-key (kbd "C-c j l") 'goto-line)
  (global-set-key (kbd "C-c q s") 'own/emacs-open-config)
  (global-set-key (kbd "C-c q n") '("open nix" . (lambda () (interactive) (own/open-project-directory "~/.nix"))))
  (global-set-key (kbd "C-c q d") '("open dotfiles" . (lambda () (interactive) (own/open-project-directory "~/.dotfiles"))))
  (global-set-key (kbd "C-c q p") '("open dotfiles" . (lambda () (interactive) (own/open-project-directory "~/.dotfiles-private"))))
#+END_SRC

* Style
** Bars and Menus
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (set-fringe-mode 10) 
  (scroll-bar-mode -1)
  (setq use-dialog-box nil)
#+END_SRC
** Basic Text Behavior
#+BEGIN_SRC emacs-lisp
    (set-default 'truncate-lines t) ;; don't wrap lines
    (setq completion-cycle-threshold 3)
    (setq tab-always-indent 'complete)
#+END_SRC
** Misc Settings
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p) ;; use y/n instead of yes/no
  (setopt use-short-answers t)
  (setq vc-follow-symlinks t)
#+END_SRC
I need an overview about keybinding (can't recognize them all)
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :custom
    (which-key-idle-delay 0.3)
    :init
    (which-key-mode))
#+END_SRC
** Theme and Fonts
Default emacs looks bright and awful so here is my theme stuff
I'm uisng base16 themes, cause i have scripts to change themes in all my programs

#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :demand
    :init
    (defun own/theme-custome-faces()
      (set-face-attribute 'org-block nil :background (face-attribute 'default :background))
      (set-face-attribute 'org-block-begin-line nil :background (face-attribute 'default :background))
      (set-face-attribute 'org-block-end-line nil :background (face-attribute 'default :background)))

    (defun own/theme-load-last-theme()
      (interactive)
      (load-theme current-theme t))

    (defun own/theme-switch-theme(theme)
      (interactive)
      (disable-theme current-theme)
      (setq current-theme theme)
      (own/theme-load-last-theme))

    (setq base16-theme-256-color-source "colors"
	  base16-theme-distinct-fringe-background nil)

    (add-to-list 'custom-theme-load-path "~/.base16-themes/emacs/")
    (load-file "~/.emacs.d/personal/theme.el")
    (own/theme-load-last-theme)

    ;; Overwriting some face attributes, cause i like it
    (with-eval-after-load 'org-faces
      (if (daemonp)
	    (add-hook 'server-after-make-frame-hook #'own/theme-custome-faces)
	  (own/theme-custome-faces))))
#+END_SRC

Now a nice font and we can start. Since fontconfig will be ignored i have to set it by hand
#+BEGIN_SRC emacs-lisp
  (if (string= (system-name) "odin")
      (add-to-list 'default-frame-alist '(font . "MonaspaceNeonExtraLight-12"))
    (add-to-list 'default-frame-alist '(font . "MonaspaceNeonExtraLight-12")))
#+END_SRC
** Dashboard
I love my dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :after (projectile nerd-icons)
    :init
    (dashboard-setup-startup-hook)
    :config
    (setq dashboard-navigator-buttons
	  `(;; line1
	    ((,(nerd-icons-octicon "nf-oct-mark_github" :height 1.1 :v-adjust 0.0)
	      "Dotifles"
	       "Browse Dotfiles"
	       (lambda (&rest _) (browse-url "https://github.com/sebastianrakel/dotfiles.git"))))))
    :custom
    (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (dashboard-startup-banner "~/.emacs.d/personal/images/avatar.png")
    (dashboard-set-navigator t)
    (dashboard-center-content t)
    (dashboard-show-shortcuts t)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-display-icons-p t)
    (dashboard-set-footer nil)
    (dashboard-icon-type 'nerd-icons)
    (dashboard-items '((recents  . 10)
		       (bookmarks . 5)
		       (projects . 5))))
#+END_SRC
** Doom Modeline
I love the look of the doom emacs modeline, luckily it's a sepperate package
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-height 20)
    (doom-modeline-project-detection 'truncate-with-project)
    (doom-modeline-icon t))
#+END_SRC
* Project Management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind
    (("C-c p" . 'projectile-command-map))
    :custom
    (projectile-indexing-method 'hybrid)
    :config
    (add-to-list 'projectile-globally-ignored-directories "node_modules")
    (projectile-mode +1)
    (global-set-key (kbd "C-c R") '("reload projects" . (lambda () (interactive) (projectile-discover-projects-in-directory "~/projects/" 4)))))
#+END_SRC

* Completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode))

  (use-package vertico
      :init
      (vertico-mode))

  (use-package consult
    :bind
    (("C-s" . consult-line)
     ("C-c s" . consult-ripgrep)
     ("C-c b" . consult-buffer)
     ("C-c t t" . consult-org-agenda))
    :bind
    (:map org-mode-map
	  ("C-c j" . consult-org-heading)))

  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    :config
    (setq completion-category-overrides '((eglot (styles orderless)))))
#+END_SRC

* Coding
** Common Stuff (things every programming thing needs)
*** ProgMode/ConfMode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'conf-mode-hook #'display-line-numbers-mode)
#+END_SRC
*** YASnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode 1))
#+end_src
*** Parentheses
For coloring parentheses i use rainbow-delimiters, so every pair of parenses have it's own color
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :config
    (smartparens-global-mode t)
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil))
#+END_SRC
I want vertical lines to show which block i'm currently editing
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :hook
    ((prog-mode-hook . highlight-indent-guides-mode))
    :config
    (setq highlight-indent-guides-method 'character
	  highlight-indent-guides-responsive 'top))
#+END_SRC
*** Git Stuff -- mostly magit cause it's love
#+BEGIN_SRC emacs-lisp
  (use-package forge
    :if (require 'magit)
    :custom
    (auth-sources '("~/.authinfo.gpg")))

#+END_SRC
*** Editorconfig
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :init
    (editorconfig-mode 1))
#+END_SRC
*** Flyspell/Flycheck
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :hook
      ((emacs-lisp-mode . own/flycheck-set-load-path)
       (after-init . global-flycheck-mode))
      :bind
      (("C-c e l" . 'flycheck-error-list)
       ("C-c e n" . 'flycheck-next-error))
      :config
      (defun own/flycheck-set-load-path()
	(setq flycheck-emacs-lisp-load-path 'inherit)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :if (executable-find "ispell")
    :hook ((text-mode . flyspell-mode)
	   (prog-mode . flyspell-prog-mode)))
#+END_SRC
*** Direnv
#+BEGIN_SRC emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+END_SRC
*** Format all the stuff
#+BEGIN_SRC emacs-lisp
  (use-package apheleia
    :ensure t
    :config
    (apheleia-global-mode +1))
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-log-io nil)
    (setq lsp-idle-delay 0.500)
    :config
    (define-key lsp-mode-map (kbd "M-<return>") #'lsp-code-actions-at-point)
    (define-key lsp-mode-map (kbd "C-M-l") #'lsp-format-buffer)
    (lsp-register-custom-settings
   '(("typescript.tsdk"
      (lambda ()
	(expand-file-name
	 "lib"
	 (shell-command-to-string "npm list --global --parseable typescript | head -n1 | tr -d \"\n\"")))
      t))))

  (use-package lsp-ui)
  (use-package dap-mode)
#+END_SRC
** Golang
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :hook
    ((go-mode . lsp-deferred)))
#+END_SRC

** Typescript/Vue

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :config
    (add-hook 'typescript-mode-hook 'lsp-deferred))

  (use-package web-mode
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-auto-close-style 2)
    (web-mode-enable-auto-closing t)
    :config
    (define-derived-mode vue-mode web-mode "Vue")
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode)))

#+END_SRC
** Org
#+begin_src emacs-lisp
  (use-package org-modern
    :after org
    :config
    (setq org-hide-emphasis-markers t
	  org-pretty-entities t
	  org-auto-align-tags nil
	  org-tags-column 0
	  org-insert-heading-respect-content t)
    (add-hook 'org-mode-hook #'org-modern-mode))

  (setq org-agenda-files (list "~/.todos"))
#+end_src
** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC
** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker)
  (use-package dockerfile-mode)
#+END_SRC
** Nix
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode)
#+END_SRC
** Puppet
#+BEGIN_SRC emacs-lisp
  (use-package puppet-mode)
#+END_SRC
** Powershell
#+BEGIN_SRC emacs-lisp
  (use-package powershell)
#+END_SRC
** YUCK
#+BEGIN_SRC emacs-lisp
  (use-package yuck-mode)
#+END_SRC

