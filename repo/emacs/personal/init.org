#+STARTUP: content
#+TITLE: Sebastians emacs configuration - in org
#+BEGIN_CENTER
This is my emacs config, it's written in org-mode
#+END_CENTER
* StartUp
** Basic Package Setup
   #+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives
		 '("org" . "http://orgmode.org/elpa/") t)
    (add-to-list 'package-archives
		 '("melpa" . "http://melpa.org/packages/") t)
    (add-to-list 'package-archives
		 '("melpa-stable" . "http://stable.melpa.org/packages/") t)

    (package-initialize)

    ;; use-package to simplify the config file
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure 't)
  #+END_SRC  

** Look and Feel
*** Bars and Menus
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (toggle-scroll-bar -1)
    (set-fringe-mode 10)
    (global-display-line-numbers-mode)
    (set-default 'truncate-lines t)
    (defalias 'yes-or-no-p 'y-or-n-p)
    (column-number-mode 1)
  #+END_SRC
*** Font
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist '(font . "monospace-14"))
  #+END_SRC
*** Theme
  #+BEGIN_SRC emacs-lisp
    (use-package dracula-theme
      :config
      (load-theme 'dracula t))
  #+END_SRC
** Backup
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+END_SRC
* Keybindings
** Common
   Use meta key for move between windows
   #+begin_src emacs-lisp
     (windmove-default-keybindings 'meta)
   #+end_src   
   All of my keybindings. Yes I know you can define keybindings directly with use-package. But
   I want to see all of my keybindings so I gather them at one location   
   #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "M-x") 'helm-M-x)
       (global-set-key (kbd "C-s") 'swiper)
       (global-set-key (kbd "C-c b") 'helm-buffers-list)
       (global-set-key (kbd "C-c r") 'reload-dotemacs)
       (global-set-key (kbd "C-c g") 'magit)
       (global-set-key (kbd "C-c p") 'projectile-command-map)
       (global-set-key (kbd "C-c q s") 'open-emacs-config)
       (global-set-key (kbd "C-c q d") 'open-dotfiles)

       (global-set-key (kbd "C-c d") 'zeal-at-point)
   #+END_SRC
*** LSP Keybindings
    #+BEGIN_SRC emacs-lisp
	(global-set-key (kbd "C-c c r") 'lsp-find-references)
	(global-set-key (kbd "C-c c d") 'lsp-find-definition)
	(global-set-key (kbd "C-c c D") 'lsp-find-declaration)

	(global-set-key (kbd "C-c c R") 'lsp-rename)
    #+END_SRC   
*** YAS Snippet Keybindings   
    #+BEGIN_SRC emacs-lisp
	;Snippets
	(global-set-key (kbd "C-c s i") 'yas-insert-snippet)
	(global-set-key (kbd "C-c s n") 'yas-new-snippet)
	(global-set-key (kbd "C-c s e") 'yas-visit-snippet-file)
    #+END_SRC
*** Keybindings for resizing emacs windows
    Because I don't want to use my mouse for resizing my windows
    #+begin_src emacs-lisp
      (global-set-key [C-M-up] 'win-resize-enlarge-horiz)
      (global-set-key [C-M-down] 'win-resize-minimize-horiz)
      (global-set-key [C-M-left] 'win-resize-enlarge-vert)
      (global-set-key [C-M-right] 'win-resize-minimize-vert)
    #+end_src
    #+BEGIN_SRC emacs-lisp
	(global-set-key (kbd "C-x C-f") 'helm-find-files)

						;Todo
	(global-set-key (kbd "C-c t t") 'org-agenda)
    #+END_SRC
*** Rescue Keybindings
    Because i want to manage my keybindings at a central position,
    it's possible that keybindings are set but the plugin is not installed.

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c q x") 'execute-extended-command)
    #+end_src
** elisp mode
   #+begin_src emacs-lisp
     (add-hook 'emacs-lisp-mode
	       (lambda () (local-set-key (kbd "C-c m e") #'eval-buffer)))
   #+end_src
* Functions
** Reload Emacs
  Helper function to reload my emacs config, is used with a keybinding
  #+BEGIN_SRC emacs-lisp
    (defun reload-dotemacs ()
      (interactive)
      (load-file "~/.emacs.d/init.el"))
  #+END_SRC
** Open Emacs Config
   Helper function to open a new buffer or jump to existing buffer with my emacs config
      #+begin_src emacs-lisp
	(defun open-emacs-config ()
	  (interactive)
	  (switch-to-buffer (find-file-noselect "~/.emacs.d/personal/init.org")))
      #+end_src
** Open Dotfiles
   Helper function to jump directly in my dotfiles repo
*** TODO Use counsel-projectile to jump to project
   #+begin_src emacs-lisp
     (defun open-dotfiles ()
       (interactive)
       (dired "~/.dotfiles"))
   #+end_src
** Resizing
   This part is copied from https://www.emacswiki.org/emacs/WindowResize
   #+begin_src emacs-lisp
     (defun win-resize-top-or-bot ()
       "Figure out if the current window is on top, bottom or in the
     middle"
       (let* ((win-edges (window-edges))
	      (this-window-y-min (nth 1 win-edges))
	      (this-window-y-max (nth 3 win-edges))
	      (fr-height (frame-height)))
	 (cond
	  ((eq 0 this-window-y-min) "top")
	  ((eq (- fr-height 1) this-window-y-max) "bot")
	  (t "mid"))))

     (defun win-resize-left-or-right ()
       "Figure out if the current window is to the left, right or in the
     middle"
       (let* ((win-edges (window-edges))
	      (this-window-x-min (nth 0 win-edges))
	      (this-window-x-max (nth 2 win-edges))
	      (fr-width (frame-width)))
	 (cond
	  ((eq 0 this-window-x-min) "left")
	  ((eq (+ fr-width 4) this-window-x-max) "right")
	  (t "mid"))))

     (defun win-resize-enlarge-horiz ()
       (interactive)
       (cond
	((equal "top" (win-resize-top-or-bot)) (enlarge-window -1))
	((equal "bot" (win-resize-top-or-bot)) (enlarge-window 1))
	((equal "mid" (win-resize-top-or-bot)) (enlarge-window -1))
	(t (message "nil"))))

     (defun win-resize-minimize-horiz ()
       (interactive)
       (cond
	((equal "top" (win-resize-top-or-bot)) (enlarge-window 1))
	((equal "bot" (win-resize-top-or-bot)) (enlarge-window -1))
	((equal "mid" (win-resize-top-or-bot)) (enlarge-window 1))
	(t (message "nil"))))

     (defun win-resize-enlarge-vert ()
       (interactive)
       (cond
	((equal "left" (win-resize-left-or-right)) (enlarge-window-horizontally -1))
	((equal "right" (win-resize-left-or-right)) (enlarge-window-horizontally 1))
	((equal "mid" (win-resize-left-or-right)) (enlarge-window-horizontally -1))))

     (defun win-resize-minimize-vert ()
       (interactive)
       (cond
	((equal "left" (win-resize-left-or-right)) (enlarge-window-horizontally 1))
	((equal "right" (win-resize-left-or-right)) (enlarge-window-horizontally -1))
	((equal "mid" (win-resize-left-or-right)) (enlarge-window-horizontally 1))))

   #+end_src
* Addons
** UI
*** Helm
    After ivy, i want to use helm again
    #+begin_src emacs-lisp
      (use-package helm
	:config
	(helm-mode 1))
    #+end_src
*** Ivy,Counsel,Swiper
   #+BEGIN_SRC emacs-lisp
	  (use-package ivy
	    :config
	    (ivy-mode 1)
	    (setq ivy-use-virtual-buffers t)
	    (setq enable-recursive-minibuffers t)
	    (setq ivy-display-style 'fancy)
	    (setq ivy-wrap t)
	    (setq enable-recursive-minibuffers t))

	  (use-package counsel
	    :after ivy
	    :config
	    (counsel-mode))

	  (use-package swiper
	    :after ivy)

          (use-package counsel-projectile)
   #+END_SRC
*** Powerline
    #+BEGIN_SRC emacs-lisp
      (use-package powerline
	:config
	(powerline-default-theme)
	(setq powerline-default-separator 'wave))
    #+END_SRC
*** Completion
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:config
	(add-hook 'after-init-hook 'global-company-mode)
	(setq company-minimum-prefix-length 2)
	(setq company-idle-delay 0))
    #+END_SRC
*** Which Key
    #+begin_src emacs-lisp
      (use-package which-key
	:config
	(setq which-key-idle-delay 0.3)
	(which-key-mode))
    #+end_src
*** Projectile
    #+begin_src emacs-lisp
      (use-package projectile
	:config
	(projectile-mode 1))
    #+end_src
*** Dashboard
    #+begin_src emacs-lisp
      (use-package all-the-icons)

      (use-package dashboard
	:config
	(dashboard-setup-startup-hook)
	(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
	(setq dashboard-startup-banner "~/.emacs.d/personal/images/avatar.png")
	(setq dashboard-center-content t)
	(setq dashboard-show-shortcuts t)
	(setq dashboard-set-heading-icons t)
	(setq dashboard-set-file-icons t)
	(setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
	(setq dashboard-items '((recents  . 5)
				(bookmarks . 5)
				(projects . 5)
				(registers . 5))))
    #+end_src
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit)
   #+END_SRC
** Coding
*** Common
**** Yasnippet
    #+begin_src emacs-lisp
      (use-package yasnippet
	:config
	(yas-global-mode 1))
    #+end_src
**** Parens, Delimiters
    #+begin_src emacs-lisp
      (use-package smartparens
	:config
	(add-hook 'prog-mode-hook #'smartparens-mode))
    #+end_src
    #+begin_src emacs-lisp
      (use-package rainbow-delimiters
	:config
	(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+end_src
**** LSP
    #+begin_src emacs-lisp
      (use-package lsp-mode
	:after lsp-ui
	:hook
	((python-mode . lsp))
	:config
	(setq lsp-keymap-prefix "C-c l"))
      (use-package lsp-ui)
    #+end_src
**** Data Formats
     #+begin_src emacs-lisp
       (use-package yaml-mode)
     #+end_src
**** Zeal/Docsets/Dash
     #+begin_src emacs-lisp
       (use-package zeal-at-point)
     #+end_src
**** Editorconfig
     #+BEGIN_SRC emacs-lisp
       (use-package editorconfig)
     #+END_SRC
**** Cursor
     I want a centered cursor for better reading
     #+begin_src emacs-lisp
       (define-global-minor-mode my-global-centered-cursor-mode centered-cursor-mode
	 (lambda ()
	   (when (not (memq major-mode
			    (list 'Info-mode 'term-mode 'eshell-mode 'shell-mode 'erc-mode)))
	     (centered-cursor-mode))))

       (use-package centered-cursor-mode
	 :config
	 (my-global-centered-cursor-mode 1))

     #+end_src
*** Org-Mode
    Some common org-mode settings
    #+begin_src emacs-lisp
      (setq org-hide-emphasis-markers t)
    #+end_src
    
    Give org mode beautiful bubbles instead of asteriks
    #+begin_src emacs-lisp
      (use-package org-bullets
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+end_src

    Add org-tempo for some basic snippets like <s<TAB> for code section
    #+begin_src emacs-lisp
      (require 'org-tempo)
    #+end_src    
*** HTML, Vue, TypeScript
    #+begin_src emacs-lisp
      (use-package web-mode
	:config
	(setq web-mode-markup-indent-offset 2)
	(add-hook 'vue-mode-hook #'lsp-deferred))

      (use-package typescript-mode
	:config
	(setq typescript-indent-level 2)
	(add-hook 'typescript-mode-hook #'lsp-deferred))
    #+end_src
*** Golang
    #+begin_src emacs-lisp
      (defun lsp-go-install-save-hooks ()
	(add-hook 'before-save-hook #'lsp-format-buffer t t)
	(add-hook 'before-save-hook #'lsp-organize-imports t t))

      (use-package go-mode
	:config
	(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
	(add-hook 'go-mode-hook #'lsp-deferred)
	(add-hook 'go-mode-hook #'yas-minor-mode))
    #+end_src
*** Puppet
    #+begin_src emacs-lisp
      (use-package puppet-mode)
    #+end_src
*** Rust
    #+begin_src emacs-lisp
      (use-package cargo)

      (use-package rustic
	:config
	(setq rustic-format-on-save t))
    #+end_src    
*** Python
    #+BEGIN_SRC emacs-lisp
      (add-hook 'python-mode-hook
		(lambda () (setq zeal-at-point-docset '("python" "django"))))

      (use-package pyvenv
	:config
	(setenv "WORKON_HOME" "~/.venvs")
	      (setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
	      (pyvenv-mode t))
    #+END_SRC
*** Docker, Nomad, Container, Stuff, Magic
**** Docker
    #+begin_src emacs-lisp
      (use-package hcl-mode)

      (use-package docker)

      (use-package dockerfile-mode)
    #+end_src
**** Terraform
     #+begin_src emacs-lisp
       (use-package terraform-mode)
       (use-package terraform-doc)
       (use-package company-terraform)
     #+end_src
*** PlatformIO
    #+begin_src emacs-lisp
      (use-package platformio-mode)
    #+end_src
*** C/C++
    #+begin_src emacs-lisp
      (add-hook 'c-mode-hook 'lsp)
      (add-hook 'c++-mode-hook 'lsp)
    #+end_src
*** Fish
    #+begin_src emacs-lisp
    #+end_src
** Misc
*** Filebin
    #+BEGIN_SRC emacs-lisp
      ;(load-file "/home/sebastian/.emacs.d/personal/functions/filebin.el")
    #+END_SRC
*** Notmuch
    #+begin_src emacs-lisp
      (use-package notmuch
	:config
	(load-file "/home/sebastian/.emacs.d/secret/notmuch.el")
	(setq send-mail-function 'sendmail-send-it
	      sendmail-program "/usr/bin/msmtp"
	      mail-specify-envelope-from t
	      message-sendmail-envelope-from 'header
	      mail-envelope-from 'header
	      message-kill-buffer-on-exit t
	      notmuch-search-oldest-first nil
	      notmuch-crypto-process-mime t) 
	(setq notmuch-saved-searches '((:name "inbox"
					      :query "tag:inbox"
					      :count-query "tag:inbox and tag:unread"
					      :sort-order newest-first)
				       (:name "archive"
					      :query "tag:archive"
					      :count-query "tag:archive"
					      :sort-order newest-first)))
	(define-key notmuch-show-mode-map "S"
	  (lambda ()
	    "mark message as spam"
	    (interactive)
	    (notmuch-show-tag (list "+spam" "-inbox" "-unread"))))
	(define-key notmuch-search-mode-map "S"
	  (lambda ()
	    "mark message as spam"
	    (interactive)
	    (notmuch-search-tag (list "-inbox" "+spam" "-unread"))
	    (next-line) ))
	(define-key notmuch-search-mode-map "d"
	  (lambda ()
	    "mark message as spam"
	    (interactive)
	    (notmuch-search-tag (list "+deleted" "-inbox" "-unread"))
	    (next-line) ))
	(define-key notmuch-search-mode-map "u"
	  (lambda ()
	    "mark message as spam"
	    (interactive)
	    (notmuch-search-tag (list "-deleted"))
	    (next-line) ))
	(define-key notmuch-search-mode-map "a"
	  (lambda ()
	    (interactive)
	    (notmuch-search-tag (list "+archive" "-unread" "-inbox"))
	    (next-line) )))
    #+end_src
*** Org-Mode Todo
    #+begin_src emacs-lisp
      (setq org-agenda-files (list "~/.todos"))
    #+end_src

    
