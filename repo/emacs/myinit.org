* Style
** Hide Startup Message, Toolbar, Scrollbar, Menubar
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message nil)
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (prefer-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

   #+END_SRC
** Theme
   #+BEGIN_SRC emacs-lisp
     (use-package base16-theme
       :ensure t
       :config (load-theme 'base16-3024 t))
     ;(load-theme ' t)
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (progn
       (message "Setting Monospace")
       (add-to-list 'default-frame-alist '(font . "monospace-14"))
       (set-frame-font "monospace-14"))
   #+END_SRC
** Powerline
   #+BEGIN_SRC emacs-lisp
     (use-package powerline
       :ensure t
       :config (powerline-default-theme))
   #+END_SRC
* GUI
** Helper
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t)

     (use-package counsel
       :ensure t)

     (use-package swiper
       :ensure t)
   #+END_SRC
** Which-Keybindings
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :init
       (which-key-mode))
   #+END_SRC
* Behavior
** Yes/No-Questions
   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Backup/Autosave
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+END_SRC
** Truncate Lines
   #+BEGIN_SRC emacs-lisp
   (set-default 'truncate-lines t)
   #+END_SRC
** Tab Mode
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)   
   #+END_SRC
** Recent Files
   #+BEGIN_SRC emacs-lisp
     (require 'recentf)
     (recentf-mode 1)
     (setq recentf-max-menu-items 25)
   #+END_SRC
** Max Lisp Depth
 #+BEGIN_SRC emacs-lisp
 #+END_SRC
* Keybindings
  #+BEGIN_SRC emacs-lisp
    (windmove-default-keybindings 'meta)

    (global-set-key "\C-s" 'swiper)

    (global-set-key (kbd "<f2>") 'counsel-projectile)
    (global-set-key (kbd "<f4>") 'ivy-switch-buffer)

    (global-set-key (kbd "C-<f5>") '(lambda () (interactive) (reload-init)))
    (global-set-key (kbd "<f5>") '(lambda () (interactive) (compile)))
    (global-set-key (kbd "C-M-l") 'indent-buffer)

    (global-set-key (kbd "C-x g") 'magit-status)

    (global-set-key (kbd "M-x") 'counsel-M-x)

    (global-set-key (kbd "C-<tab>") 'hs-toggle-hiding)

    (global-set-key [C-mouse-4] 'text-scale-increase)
    (global-set-key [C-mouse-5] 'text-scale-decrease)
  #+END_SRC
* Programming
** Common
*** Core
  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 'hs-minor-mode)
    (add-hook 'prog-mode-hook 'linum-mode)
  #+END_SRC
*** Org Mode
    #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC
*** Autocomplete
    #+BEGIN_SRC emacs-lisp
       (use-package company
	 :ensure t)

       (add-hook 'after-init-hook 'global-company-mode)
    #+END_SRC
*** Parens and delimiters
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
        :ensure t)

      (use-package smartparens
        :ensure t
        :config (add-hook 'prog-mode-hook 'smartparens-mode))
    #+END_SRC  
*** Snippets
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
	:ensure t
	:config (yas-global-mode 1))
    #+END_SRC
*** LSP
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-mode
	:ensure t
	:commands lsp)

      (use-package lsp-ui :ensure t :commands lsp-ui-mode)
      (use-package company-lsp :ensure t :commands company-lsp)
      (use-package lsp-ivy :ensure t :commands lsp-ivy-workspace-symbol)
      (use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)
    #+END_SRC
*** Git
    #+BEGIN_SRC emacs-lisp
      (use-package magit
	:ensure t)
    #+END_SRC
*** Projectile
    #+BEGIN_SRC emacs-lisp
      (use-package projectile :ensure t)
      (use-package counsel-projectile :ensure t)
    #+END_SRC
*** Flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
	:ensure t
	:init
	(global-flycheck-mode t))
    #+END_SRC
*** editorconfig
    #+BEGIN_SRC emacs-lisp
      (use-package editorconfig
	:ensure t
	:config (editorconfig-mode 1))
    #+END_SRC
*** YAML/Json
    #+BEGIN_SRC emacs-lisp
      (use-package yaml-mode
        :ensure t)

      (use-package json-mode
        :ensure t)
    #+END_SRC
** Languages
*** Go
    #+BEGIN_SRC emacs-lisp
      (use-package go-mode :ensure t)
      (use-package go-dlv :ensure t)
      (use-package go-playground :ensure t)

      (defun my-go-init-hook()
        (message "My Go Hook")
        (set 'gofmt-command "goimports")
        (add-hook 'before-save-hook #'lsp-format-buffer t t)
        (add-hook 'before-save-hook #'lsp-organize-imports t t)

        (if (not (string-match "go" compile-command))
            (set (make-local-variable 'compile-command)
                 "go build -v && go test -v && go vet"))

        (yas-minor-mode)
        (lsp))

      (add-hook 'go-mode-hook #'my-go-init-hook)
    #+END_SRC
*** C/C++
    #+BEGIN_SRC emacs-lisp
      (use-package ccls
        :ensure t
        :hook ((c-mode c++-mode objc-mode cuda-mode) .
               (lambda () (require 'ccls) (lsp))))
    #+END_SRC
*** HTML
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :ensure t)

      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.jinja2?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.j2?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml?\\'" . web-mode))

      (setq web-mode-engines-alist
            '(("django"    . "\\.jinja2\\'")
              ("django"    . "\\.djhtml\\'")))

      (setq web-mode-enable-auto-closing t)
    #+END_SRC
*** Puppet
    #+BEGIN_SRC emacs-lisp
      (use-package puppet-mode
        :ensure t)

      (defun puppet-lint-file()
        (interactive)
        (message "Fixing Puppet File")
        (shell-command (concat "puppet-lint  --only-check 'arrow_alignment,trailing_whitespace'  --fix " (buffer-file-name))))

      (defun puppet-lint-file-revert()
        (interactive)
        (puppet-lint-file)
        (revert-buffer t t))

      (add-hook 'puppet-mode-hook
                (lambda ()
                  (add-hook 'after-save-hook #'puppet-lint-file-revert)))
    #+END_SRC
*** Python
    #+BEGIN_SRC emacs-lisp
      (add-hook 'python-mode #'lsp)
    #+END_SRC
*** Embedded
    #+BEGIN_SRC emacs-lisp
      (use-package platformio-mode
        :ensure t)
    #+END_SRC
*** Nginx
    I have to configure a lot nginx configs, so i need the nginx mode
    #+BEGIN_SRC emacs-lisp
      (use-package nginx-mode
        :ensure t)

      (use-package company-nginx
        :ensure t
        :config
        (eval-after-load 'nginx-mode
          '(add-hook 'nginx-mode-hook #'company-nginx-keywords)))
    #+END_SRC
*** Powershell
  #+BEGIN_SRC emacs-lisp
    (use-package powershell
      :ensure t)
  #+END_SRC
*** PKGBUILD
    #+BEGIN_SRC emacs-lisp
      (use-package pkgbuild-mode
        :ensure t)
    #+END_SRC
* Internet
** Notmuch
   #+BEGIN_SRC emacs-lisp
     (setq notmuch-search-oldest-first nil)
   #+END_SRC
* Helper Functions
  #+BEGIN_SRC emacs-lisp
     (defun reload-init()
       (interactive)
       (load-file "~/.emacs.d/init.el"))

     (defun indent-buffer ()
       (interactive)
       (save-excursion
	 (indent-region (point-min) (point-max) nil)))
  #+END_SRC
